@page "/register"
@using ZooExpoOrg.Web.Services.Accounts
@using System.ComponentModel.DataAnnotations
@using ZooExpoOrg.Web.Services.Auth
@using ZooExpoOrg.Web.Services.GetRsultHelper;
@using ZooExpoOrg.Web.Shared.Layouts

@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<div style="overflow: hidden;">
    <MudGrid Justify="Justify.Center" Class="pa-10">
        <MudItem xs="10" sm="8">
            <MudPaper Class="pa-4">
                <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                    <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Регистрация</MudText>
    
                    <MudAlert Severity="Severity.Error" Class="@(ShowErrors ? "mb-3 d-block" : "d-none")">
                        @foreach (string mesage in Error)
                        {
                            <MudText>@mesage</MudText>
                        }
                    </MudAlert>
    
                    <MudTextField T="string"
                                    @bind-Value="model.UserName" For="@(() => model.UserName)"
                                    Label="Логин" 
                                    Required="true" 
                                    RequiredError="Логин обязателен"
                                    HelperText="Введите ваш логин"/>
    
                    <MudTextField T="string"
                                    @bind-Value="model.Email" For="@(() => model.Email)"
                                    Label="Email" 
                                    Required="true" 
                                    RequiredError="Email обязателен"
                                    HelperText="Введите ваш email"/>
    
                    <MudTextField @bind-Value="model.Password" For="@(() => model.Password)"
                                    Label="Пароль"
                                    HelperText="Введите ваш пароль"
                                    InputType="@PasswordInput"
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@PasswordInputIcon"
                                    Required="true"
                                    RequiredError="Пароль обязателен"
                                    OnAdornmentClick="TogglePasswordVisibility" />
    
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled"
                            Color="Color.Primary"
                            Size="Size.Medium"
                            ButtonType="ButtonType.Submit">Зарегистрироваться</MudButton>
    
                        <MudSpacer />
    
                        <MudButton Class="" Variant="Variant.Filled"
                            Color="Color.Secondary"
                            Size="Size.Medium"
                            OnClick="@GoToLogin">Вход</MudButton>
                    </MudCardActions>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    private RegisterAccountModel model = new RegisterAccountModel();
    private bool registerProcessing = false;

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private bool ShowErrors;
    private List<string> Error = new List<string>();

    void TogglePasswordVisibility()
    {
        if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task OnValidSubmit()
    {
        ShowErrors = false;
        Error.Clear();

        var registerResult = await AccountService.RegisterAccount(model);

        if (registerResult.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            foreach (ManageModelError error in registerResult.FieldErrors)
            {
                switch (error.Message)
                {
                    case "User name is required.":
                        Error.Add("Логин обязателен");
                        break;
                    case "UserName is long.":
                        Error.Add("Имя пользователя слишком длинное");
                        break;
                    case "Email is required.":
                        Error.Add("Email обязателен");
                        break;
                    case "Email format is incorrect.":
                        Error.Add("Неверный формат Email");
                        break;
                    case "Email is long.":
                        Error.Add("Email слишком длинное.");
                        break;
                    case "Password is required.":
                        Error.Add("Пароль обязателен");
                        break;
                    case "Password is long.":
                        Error.Add("Пароль слишком длинный");
                        break;
                    default:
                        Error.Add(error.Message);
                        break;
                }
            }

            ShowErrors = true;
        }
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
