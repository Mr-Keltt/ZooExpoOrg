@using Microsoft.AspNetCore.Authorization;
@using ZooExpoOrg.Web.Services.Clients;
@using ZooExpoOrg.Web.Services.Expositions;
@using ZooExpoOrg.Web.Services.GetIdHelper;
@using ZooExpoOrg.Web.Shared.Components
@using ZooExpoOrg.Web.Shared.Layouts;

@inject IGetIdHelperService GetIdHelper
@inject IClientService ClientService
@inject IExpositionService ExpositionService
@inject NavigationManager NavigationManager

@page "/exposition/organizeds"
@layout MainLayout

@attribute [Authorize]

<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="10" sm="8">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h4" GutterBottom="true"><b>Мои выставки</b></MudText>

            @if (expositions.Count > 0)
            {
                @foreach (VueExpositionModel exposition in expositions)
                {
                        <ExpositionCard Exposition="@exposition"/>
                }
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<AddButton Url="/exposition/create" />

@code {
    private List<VueExpositionModel> expositions = new List<VueExpositionModel>();
    private VueClientModel currentClient = new VueClientModel();

    protected override async Task OnInitializedAsync()
    {
        await GetCuresntClient();
        await ExpositionDataReload();
    }

    private async Task GetCuresntClient()
    {
        try
        {
            var getClientIdResult = await GetIdHelper.GetCurrentClientId();

            if (!getClientIdResult.Successful)
            {
                return;
            }

            var getClientResult = await ClientService.GetClient(getClientIdResult.Id);

            if (!getClientResult.Successful)
            {
                return;
            }

            currentClient = getClientResult.Result;
        }
        catch (Exception e)
        {
            return;
        }
    }

    private async Task ExpositionDataReload()
    {
        foreach (var expositionId in currentClient.OrganizedExpositions)
        {
            var getExpositionResult = await ExpositionService.GetExposition(expositionId);

            if (getExpositionResult.Successful)
            {
                expositions.Add(getExpositionResult.Result);
            }
        }

        StateHasChanged();
    }
}
