@using ZooExpoOrg.Web.Services.Clients;
@using ZooExpoOrg.Web.Services.GetIdHelper;
@using ZooExpoOrg.Web.Services.GetRsultHelper;
@using ZooExpoOrg.Web.Services.Photos;
@inject IGetIdHelperService GetIdHelper
@inject IClientService ClientService
@inject IPhotoService PhotoService
@inject NavigationManager NavigationManager

<MudForm Disabled="@formDisabled" Class="mt-2" Model="@updateClientModel">
	<MudTextField T="string" 
		@bind-Value="updateClientModel.Name"
		Label="Имя"
		/>

	<MudAlert Severity="Severity.Error" Class="@(errorModel.Name != "" ? "my-3 d-block" : "d-none")">
		@errorModel.Name
	</MudAlert>

	<MudTextField T="string" 
		@bind-Value="updateClientModel.Surname"
		Label="Фамилия"
		/>
	<MudAlert Severity="Severity.Error" Class="@(errorModel.Surname != "" ? "my-3 d-block" : "d-none")">
		@errorModel.Surname
	</MudAlert>

	<MudTextField T="string" 
		@bind-Value="updateClientModel.Patronymic"
		Label="Отчество"
		/>
	<MudAlert Severity="Severity.Error" Class="@(errorModel.Patronymic != "" ? "my-3 d-block" : "d-none")">
		@errorModel.Patronymic
	</MudAlert>

	<MudPaper Class="pa-2 mt-2">
		@if (imageSrc == "")
		{
			<MudSkeleton 
				SkeletonType="SkeletonType.Rectangle" 
				Width="200px"
				Height="200px"/>
		}
		else
		{
			<MudImage 
				@bind-Src="imageSrc"
				Width="200" 
				Height="200" 
				ObjectFit="ObjectFit.Cover"
				Alt="Ваше фото" 
				Elevation="25" 
				Class="rounded-lg ma-4"/>
		}
	</MudPaper>

	<MudFileUpload 
		T="IBrowserFile" 
		Accept=".png, .jpg" 
		FilesChanged="UploadImage" 
		MaximumFileCount="1">
		<ButtonTemplate>
			<MudButton 
				HtmlTag="label"
				for="@context.Id"
				Style="width: 100%"
				Variant="@(formDisabled ? Variant.Outlined : Variant.Filled)"
				Color="@(formDisabled ? Color.Default : Color.Primary)"
				Size="Size.Medium"
				>Изменить фото</MudButton>
		</ButtonTemplate>
	</MudFileUpload>

	@if (!formDisabled)
	{
		<MudCardActions>
			<MudButton 
				Class="mt-2"
				Size="Size.Medium"
				Variant="Variant.Filled"
				Color="Color.Primary"
				OnClick="OnValidSubmit">Применить</MudButton>

			<MudSpacer />

			<MudButton 
				Class="mt-2"
				Size="Size.Medium"
				Variant="Variant.Filled"
				Color="Color.Error"
				OnClick="DisableForm">Отменить</MudButton>
		</MudCardActions>
	}
</MudForm>

@if (formDisabled)
{
	<MudCardActions>
		<MudSpacer />

		<MudButton 
			Class="mt-2"
			Size="Size.Medium"
			Variant="Variant.Filled"
			Color="Color.Primary"
			OnClick="EnableForm"
			>Редактировать</MudButton>
	</MudCardActions>
}


@code {
	private Guid currentClientId;
	private bool formDisabled = true;
	private VueUpdateClientModel updateClientModel = new VueUpdateClientModel();
	private VueCreatePhotoModel createPhotoModel = new VueCreatePhotoModel();
	private ClientValidationErorr errorModel = new ClientValidationErorr();
	private string imageSrc = "";

	protected override async Task OnInitializedAsync()
	{
		var getClientIdResult = await GetIdHelper.GetCurrentClientId();

		if (!getClientIdResult.Successful)
		{
			NavigationManager.NavigateTo("/logout");
		}

		currentClientId = getClientIdResult.Id;

		ReloadClientData();

		StateHasChanged();
	}

	private async void ReloadClientData()
	{
		var getClientResult = await ClientService.GetClient(currentClientId);

		if (!getClientResult.Successful)
		{
			NavigationManager.NavigateTo("/logout");
		}

		var clientModel = getClientResult.Result;

		updateClientModel.Name = clientModel.Name;
		updateClientModel.Surname = clientModel.Surname;
		updateClientModel.Patronymic = clientModel.Patronymic;

		var getPhotoResult = await PhotoService.GetPhotosLocated(currentClientId);

		if (getPhotoResult.Successful)
		{
			var photo = getPhotoResult.Result[0];

			imageSrc = photo.StringImageData;
		}

		StateHasChanged();
	}

	private void EnableForm()
	{
		formDisabled = false;
	}

	private void DisableForm()
	{
		ReloadClientData();
		formDisabled = true;
	}

	private async void UploadImage(IBrowserFile image)
	{
		var imageName = image.Name;
		var imageExtension = Path.GetExtension(imageName);

		var imageData = await ImageHelper.ConvertToByteArray(image);

		string imageDataString = Convert.ToBase64String(imageData);
		string imageMimeType = "";

		switch (imageExtension)
		{
			case ".jpg":
				imageMimeType = "jpeg";
				break;
			case ".png":
				imageMimeType = "png";
				break;
		}

		imageSrc = $"data:image/{imageMimeType}; base64,{imageDataString}";

		createPhotoModel.OwnerId = currentClientId;
		createPhotoModel.LocationId = currentClientId;
		createPhotoModel.StringImageData = imageSrc;

		StateHasChanged();
	}

	private async Task OnValidSubmit()
	{
		errorModel.Name = "";
		errorModel.Surname = "";
		errorModel.Patronymic = "";

		if (updateClientModel.Patronymic == null)
		{
			updateClientModel.Patronymic = "";
		}

		var clientCreateResult = await ClientService.UpdateClients(currentClientId, updateClientModel);

		if (!clientCreateResult.Successful)
		{
			foreach (ManageModelError error in clientCreateResult.FieldErrors)
			{
				switch (error.Message)
				{
					case "Name is required.":
						errorModel.Name = "Имя обязательно";
						break;
					case "Name must not exceed 50 characters.":
						errorModel.Name = "Имя слишком длинное";
						break;
					case "Surname is required.":
						errorModel.Surname = "Фамилия обязательно";
						break;
					case "Surname must not exceed 50 characters.":
						errorModel.Surname = "Фамилия слишком длинная";
						break;
					case "Patronymic must not exceed 50 characters.":
						errorModel.Patronymic = "Отчество слишком длинное";
						break;
				}
			}
		}
		else
		{
			DisableForm();
		}
	}
}
