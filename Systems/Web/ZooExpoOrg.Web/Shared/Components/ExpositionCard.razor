@using ZooExpoOrg.Web.Services.Expositions;
@using ZooExpoOrg.Web.Services.GetIdHelper;
@using ZooExpoOrg.Web.Services.Photos;

@inject IGetIdHelperService GetIdHelper
@inject IExpositionService ExpositionService
@inject IPhotoService PhotoService
@inject NavigationManager NavigationManager

<MudCard Elevation="3" Class="rounded-lg mb-3">
    <MudPaper Elevation="3" Class="rounded-lg">
        <MudCarousel Class="mud-width-full rounded-lg" 
                    Style="height:200px; overflow: hidden;" 
                    ShowBullets="true" 
                    AutoCycle="true"
                    TData="object"
                    ShowArrows="false">
            @if (photos.Count > 0)
            {
                @foreach (VuePhotoModel photo in photos)
                {
                    <MudCarouselItem 
                        Transition="Transition.Slide" 
                        Color="@Color.Primary" 
                        Style="overflow: hidden;">
                        <MudImage Src="@photo.StringImageData" ObjectFit="ObjectFit.Cover"/>
                    </MudCarouselItem>
                }
            }
        </MudCarousel>
    </MudPaper>

    <MudCardContent>
        <MudText Typo="Typo.h5"><b>@Exposition.Title</b></MudText>
        <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Darken1};")">@status</MudText>
        <MudText Typo="Typo.h6">@description</MudText>
    </MudCardContent>

    <MudCardActions>
        <ExpositionActionButton Exposition="@Exposition"/>

        <MudSpacer />

        <MudButton Variant="Variant.Text" Color="Color.Primary">Показать больше</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public VueExpositionModel Exposition { get; set; }

    public List<VuePhotoModel> photos = new List<VuePhotoModel>();
    private string status = "";
    private string description = "";

    protected override async Task OnInitializedAsync()
    {
        await GetPhotos();
        await GetStatus();
        await GetDescription();
    }

    private async Task GetPhotos()
    {
        var getPhotoResult = await PhotoService.GetPhotosLocated(Exposition.Id);

        if (!getPhotoResult.Successful)
        {
            return;
        }

        photos = getPhotoResult.Result;
    }

    private async Task GetStatus()
    {
        if (DateTime.Today < Exposition.DateStart)
        {
            status = $"Начнется {Exposition.DateStart.ToString("dd.MM.yy")}";
        }
        else if (DateTime.Today >= Exposition.DateStart && DateTime.Today <= Exposition.DateEnd)
        {
            status = "Идет сейчас";
        }
        else
        {
            status = "Закончилась";
        }
    }

    private async Task GetDescription()
    {
        if (Exposition.Description.Length < 300)
        {
            description = Exposition.Description;
        }
        else
        {
            description = $"{Exposition.Description.Substring(0, 297)}...";
        }
    }
}