@using ZooExpoOrg.Web.Services.Clients;
@using ZooExpoOrg.Web.Services.Expositions;
@using ZooExpoOrg.Web.Services.GetIdHelper;
@using ZooExpoOrg.Web.Services.GetRsultHelper;

@inject IGetIdHelperService GetIdHelper
@inject IClientService ClientService
@inject IExpositionService ExpositionService
@inject NavigationManager NavigationManager

<MudButton Variant="@displayVariant"
			Color="@displayColor"
			Class="@(displayText != "" ? "d-block" : "d-none")"
			OnClick="@Action">
	@displayText
</MudButton>

@code {
	[Parameter]
	public VueExpositionModel Exposition { get; set; }

	private VueClientModel currentClient = new VueClientModel();
	private string displayText = "";
	private Variant displayVariant = Variant.Filled;
	private Color displayColor = Color.Secondary;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await GetCuresntClient();
			await SettingButton();
		}
		catch(Exception e)
		{
			
		}
	}

	private async Task GetCuresntClient()
	{
		var getClientIdResult = await GetIdHelper.GetCurrentClientId();

		if (!getClientIdResult.Successful)
		{
			return;
		}

		var getClientResult = await ClientService.GetClient(getClientIdResult.Id);

		if (!getClientResult.Successful)
		{
			return;
		}

		currentClient = getClientResult.Result;
	}

	private async Task SettingButton()
	{
		if (currentClient.Id == null)
		{
			return;
		}

		var clientOrganizedExpositions = currentClient.OrganizedExpositions;

		if (clientOrganizedExpositions.Contains(Exposition.Id))
		{
			displayText = "Редактировать";
			displayVariant = Variant.Filled;
			displayColor = Color.Primary;

			StateHasChanged();
			return;
		}

		var clientSubscriptions = currentClient.Subscriptions;

		if (clientSubscriptions.Contains(Exposition.Id))
		{
			displayText = "Вы подписаны";
			displayVariant = Variant.Outlined;
			displayColor = Color.Warning;
		}
		else
		{
			displayText = "Подписаться";
			displayVariant = Variant.Filled;
			displayColor = Color.Secondary;
		}

		StateHasChanged();
	}

	private async Task Action()
	{
		if (displayText == "Редактировать")
		{
			return;
		}
		else if (displayText == "Подписаться")
		{
			await ExpositionService.Subscribe(Exposition.Id, currentClient.Id);
		}
		else if (displayText == "Вы подписаны")
		{
			await ExpositionService.Unsubscribe(Exposition.Id, currentClient.Id);
		}

		await GetCuresntClient();
		await SettingButton();
	}
}
